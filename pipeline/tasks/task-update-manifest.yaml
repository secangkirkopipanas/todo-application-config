apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-manifest
spec:
  params:
    - default: >-
        https://dev-user:openshift@gitea.apps.cluster-5khxf.5khxf.sandbox2563.opentlc.com/dev-user/securing-software-supply-chain.git
      name: gitRepositoryUrl
      type: string
    - default: main
      name: gitRepositoryRevision
      type: string
    - name: imageTagName
      type: string
    - default: ''
      name: pushToRevision
      type: string
    - default: 'false'
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
      name: insecure-skip-tls-verify
      type: string
  steps:
  - image: 'quay.io/rh_rh/pipeline-utils:latest'
    name: update-manifest
    env:
        - name: GITHUB_EMAIL
          valueFrom:
            secretKeyRef:
              name: github-credentials
              key: "email"
        - name: GITHUB_USERNAME
          valueFrom:
            secretKeyRef:
              name: github-credentials
              key: "username"
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-credentials
              key: "token"
    script: |
      #!/usr/bin/env bash
      set +x

      printf -- "------------------------------\n"
      printf    " Update Manifest and Push     \n"
      printf -- "------------------------------\n\n"

      printf -- "-> Configuring Git environment... "
      git config --global user.email "$GITHUB_EMAIL"
      git config --global user.name "$GITHUB_USERNAME"
      printf "Done!\n"

      printf -- "-> Fetching manifest from Git repo ($(params.gitRepositoryRevision))... "
      NEW_GIT_URL="$(params.gitRepositoryUrl)"
      NEW_GIT_URL=$(echo "${NEW_GIT_URL/https:\/\//https:\/\/$GITHUB_USERNAME:$GITHUB_TOKEN@}")
      git clone --quiet "$NEW_GIT_URL" $(pwd)/repository
      git config --global credential.helper store
      cd $(pwd)/repository
      git checkout --quiet "$(params.gitRepositoryRevision)"
      printf "Done!\n"
      
      printf -- "-> Updating manifest to use 'quay.io/rh_rh/todo-application:$(params.imageTagName)' image... "
      yq e -i '.spec.template.spec.containers[0].image = "quay.io/rh_rh/todo-application:$(params.imageTagName)"' deploy/app-java/base/dep-todo.yaml
      printf "Done!\n"

      if [ ! -z "$(params.pushToRevision)" ]; then
        printf -- "-> Pushing manifest to Git repo... "
        git add *
        git commit --quiet -m "Updated manifest with tag name '$(params.imageTagName)'"
        git push --quiet -f --set-upstream origin $(params.pushToRevision)
        printf "Done!\n\n"
      fi

    volumeMounts:
      - mountPath: /workspace/repository
        name: repository
    workingDir: /workspace
  volumes:
    - emptyDir: {}
      name: repository